<?xml version="1.0" encoding="UTF-8" ?>
<class name="MeshInstance" inherits="GeometryInstance" version="3.2">
	<brief_description>
		Node that instances meshes into a scenario.
	</brief_description>
	<description>
		MeshInstance is a node that takes a [Mesh] resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="create_convex_collision">
			<return type="void">
			</return>
			<description>
				This helper creates a [StaticBody] child node with a [ConvexPolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing.
			</description>
		</method>
		<method name="create_debug_tangents">
			<return type="void">
			</return>
			<description>
				This helper creates a [MeshInstance] child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing.
			</description>
		</method>
		<method name="create_trimesh_collision">
			<return type="void">
			</return>
			<description>
				This helper creates a [StaticBody] child node with a [ConcavePolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing.
			</description>
		</method>
		<method name="get_surface_material" qualifiers="const">
			<return type="Material">
			</return>
			<argument index="0" name="surface" type="int">
			</argument>
			<description>
				Returns the [Material] for a surface of the [Mesh] resource.
			</description>
		</method>
		<method name="get_surface_material_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the number of surface materials.
			</description>
		</method>
		<method name="set_surface_material">
			<return type="void">
			</return>
			<argument index="0" name="surface" type="int">
			</argument>
			<argument index="1" name="material" type="Material">
			</argument>
			<description>
				Sets the [Material] for a surface of the [Mesh] resource.
			</description>
		</method>
	</methods>
	<members>
		<member name="mesh" type="Mesh" setter="set_mesh" getter="get_mesh">
			The [Mesh] resource for the instance.
		</member>
		<member name="skeleton" type="NodePath" setter="set_skeleton_path" getter="get_skeleton_path" default="NodePath(&quot;..&quot;)">
			[NodePath] to the [Skeleton] associated with the instance.
		</member>
		<member name="skin" type="Skin" setter="set_skin" getter="get_skin">
			Sets the skin to be used by this instance.
		</member>
		<member name="software_skinning_normal_mode" type="int" setter="set_software_skinning_normal_mode" getter="get_software_skinning_normal_mode" enum="MeshInstance.SoftwareSkinningNormalMode" default="1">
			Sets the way normals are transformed when software skinning is used. Values can be set from [enum SoftwareSkinningNormalMode].
			See also [member ProjectSettings.rendering/quality/skinning/software_skinning_fallback] for details about how software skinning is enabled.
		</member>
	</members>
	<constants>
		<constant name="DONT_TRANSFORM_NORMALS" value="0" enum="SoftwareSkinningNormalMode">
			Normals are not transformed when software skinning is used (fastest option).
		</constant>
		<constant name="TRANSFORM_NORMALS" value="1" enum="SoftwareSkinningNormalMode">
			Normals are transformed when software skinning is used (default option).
		</constant>
		<constant name="ENSURE_CORRECT_NORMALS" value="2" enum="SoftwareSkinningNormalMode">
			Normals are transformed when software skinning is used and correct calculations are made for non-uniform scale (slowest option).
		</constant>
	</constants>
</class>

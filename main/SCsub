#!/usr/bin/env python

Import('env')

from platform_methods import run_in_subprocess
import main_builders

env.main_sources = []

if env['unity']:
    env.add_source_files(env.main_sources, "#misc/scu/SCU_main.cc")
    env.Depends("#misc/scu/SCU_main.cc", "#main/app_icon.gen.h")
    env.Depends("#misc/scu/SCU_main.cc", "#main/splash.gen.h")
    env.Depends("#misc/scu/SCU_main.cc", "#main/splash_editor.gen.h")
else:
    env.add_source_files(env.main_sources, "*.cpp")

# order matters here.  higher index controller database files write on top of lower index database files
controller_databases = ["#main/gamecontrollerdb.txt", "#main/gamecontrollerdb_205.txt", "#main/gamecontrollerdb_204.txt", "#main/godotcontrollerdb.txt"]

env.Depends("#main/default_controller_mappings.gen.cpp", controller_databases)
env.CommandNoCache("#main/default_controller_mappings.gen.cpp", controller_databases, run_in_subprocess(main_builders.make_default_controller_mappings))

# Don't warn about duplicate entry here, we need it registered manually for first build,
# even if later builds will pick it up twice due to above *.cpp globbing.
env.add_source_files(env.main_sources, "#main/default_controller_mappings.gen.cpp", warn_duplicates=False)


env.Depends("#main/splash.gen.h", "#main/splash.png")
env.CommandNoCache("#main/splash.gen.h", "#main/splash.png", run_in_subprocess(main_builders.make_splash))

env.Depends("#main/splash_editor.gen.h", "#main/splash_editor.png")
env.CommandNoCache("#main/splash_editor.gen.h", "#main/splash_editor.png", run_in_subprocess(main_builders.make_splash_editor))

env.Depends("#main/app_icon.gen.h", "#main/app_icon.png")
env.CommandNoCache("#main/app_icon.gen.h", "#main/app_icon.png", run_in_subprocess(main_builders.make_app_icon))

SConscript('tests/SCsub')

#for count in range(32):
    #f_a = FindFile('#main/splash.gen.h', ',')
    #f_b = FindFile('#main/splash_editor.gen.h', ',')
    #f_c = FindFile('#main/app_icon.gen.h', ',')
    
    #print f_a
    #print f_b
    #print f_c

    #bBreak = True
    
    #if f_a == None:
        #bBreak = False
    #if f_b == None:
        #bBreak = False
    #if f_c == None:
        #bBreak = False
    
    #if bBreak:
        #break

#dummy_generator_dependency = Object("#gen_require.cc")
lib = env.add_library("main", env.main_sources)
#Requires(lib, dummy_generator_dependency)

env.Prepend(LIBS=[lib])

